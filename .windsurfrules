ddoky 프로젝트
1. 로직 만들기 도구에서 기능을 추가했을 때 동작하는 코드 로직 흐름

-- UI 초기화 및 시작 단계
MainWindow의 init 메서드에서 시작
LogicDetailWidget 초기화 시:
LogicsDataSettingFilesManager와 AllLogicsDataRepositoryAndService 인스턴스 생성
UI 컴포넌트 초기화 (로직 이름 입력, 트리거 키 설정, 반복 횟수 등)
이벤트 필터 설치 및 시그널/슬롯 연결
중첩 로직 체크박스 초기 상태 설정

-- 로직 실행기(LogicExecutor) 초기화
프로세스 매니저와 로직 매니저 주입받음
실행 상태 관리 초기화:
python
CopyInsert
self.execution_state = {
    'is_executing': False,
    'is_stopping': False,
    'current_step': 0,
    'current_repeat': 1
}
키 딜레이 설정 로드 및 관리
스레드 동기화를 위한 락(Lock) 설정:
python
CopyInsert
self._hook_lock = threading.Lock()
self._state_lock = threading.Lock()
self._cleanup_lock = threading.Lock()

-- 로직 저장 시 추가 동작
UUID 생성 및 현재 시간 기록
로직 데이터에 중첩 로직 여부 포함
트리거 키 정보 저장
시그널 발생 순서:
logic_saved 시그널
logic_updated 시그널 (수정 시)
log_message 시그널 (로그 기록)

-- 로직 실행 시 세부 흐름
실행 전 상태 체크:
python
CopyInsert
if self.execution_state['is_executing']:
    return
실행 시작 시 타이머 및 시간 기록:
python
CopyInsert
self._start_time = time.time()
각 단계별 실행 시 락(Lock) 사용으로 스레드 안전성 보장
강제 중지 키(ESC) 모니터링
실행 중 에러 발생 시 execution_error 시그널 발생

-- 중요한 추가 사항
스레드 안전성:
여러 락을 사용하여 동시성 문제 방지
키보드/마우스 입력 시 적절한 딜레이 적용
리소스 관리:
실행 완료 후 cleanup_finished 시그널로 정리
활성 타이머 추적 및 정리
에러 처리:
각 실행 단계마다 예외 처리
로그 메시지를 통한 상태 추적